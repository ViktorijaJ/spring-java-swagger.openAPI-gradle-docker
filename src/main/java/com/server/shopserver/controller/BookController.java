package com.server.shopserver.controller;

import com.server.shopserver.model.Book;
import com.server.shopserver.model.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@CrossOrigin(origins = "http://localhost:3001")
@Controller // This means that this class is a Controller
@RequestMapping(value = "/api")
// This means URL's start with /demo (after Application path)
public class BookController {

    @Autowired    // This means to get the bean called productRepository,
    // which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @RequestMapping(value = "/books", method = RequestMethod.GET)
    public @ResponseBody
    List<Book> getBooks() {
        List<Book> list = new ArrayList<>();
        Iterable<Book> customers = bookRepository.findAll();
        // This returns a JSON or XML with the products

        customers.forEach(list::add);
        return list;
    }

    @RequestMapping(value = "/books/create", method = RequestMethod.POST)
    public @ResponseBody
    ResponseEntity<Book> createBook(@Valid @RequestBody Book book) {
        Book savedBook = bookRepository.save(book);
        return new ResponseEntity<>(savedBook, HttpStatus.OK);
    }


    @RequestMapping(value = "/books/{id}", method = RequestMethod.GET)
    public ResponseEntity<Book> getBook(@PathVariable("id") Integer id) {

        Optional<Book> bookData = bookRepository.findById(id);
        if (bookData.isPresent()) {
            return new ResponseEntity<>(bookData.get(), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @RequestMapping(value = "/books/{id}", method = RequestMethod.PUT)
    public @ResponseBody
    ResponseEntity<Book> updateBook(@PathVariable("id") Integer id, @RequestBody Book book) {

        Optional<Book> bookData = bookRepository.findById(id);
        if (bookData.isPresent()) {
            Book savedBook = bookData.get();
            savedBook.setTitle(book.getTitle());
            savedBook.setAuthor(book.getAuthor());
            savedBook.setDescription(book.getDescription());
            savedBook.setPublished(book.getPublished());

            Book updatedBook = bookRepository.save(savedBook);
            return new ResponseEntity<>(updatedBook, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

    }

    @RequestMapping(value = "/books/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    String deleteBook(@PathVariable("id") Integer id) {
        try {
            bookRepository.deleteById(id);
        } catch (Exception e) {
            return "Fail to delete!";
        }
        return "Book has been deleted!";
    }
}
